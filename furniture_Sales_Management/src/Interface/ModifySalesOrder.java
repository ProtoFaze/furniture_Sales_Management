/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interface;

import Classes.Furniture;
import javax.swing.DefaultComboBoxModel;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aryssa
 */
public class ModifySalesOrder extends javax.swing.JPanel {
    int quantity;
    double price;
    
    MainPage parent;
    
    private String[] selectedOrder; // To store the details of the selected order


    /**
     * Creates new form ModifySalesOrder
     */
    public ModifySalesOrder() {
        initComponents();
    }
    public ModifySalesOrder(MainPage parent){
            initComponents();
            this.parent = parent;
            LoadData();
    }
    private void LoadData(){
    List<String> idList = new ArrayList<>();
        for (Furniture furniture: Furniture.list){
            idList.add(furniture.getId());
        }
    DefaultComboBoxModel data = new DefaultComboBoxModel<>(idList.toArray(new String [0]));
    tfFurnitureID.setModel(data);   
    }
    
    
    private String[] readTableDataFromFile(String selectedOrderId) {
    DefaultTableModel model = (DefaultTableModel) tblQuotation1.getModel();
    model.setRowCount(0); // Clear existing data in the table

    try (BufferedReader br = new BufferedReader(new FileReader("salesOrder.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(",");
            String orderIDFromFile = parts[0].trim();
            if (orderIDFromFile.equals(selectedOrderId)) {
                // Order ID found, return the details
                selectedOrder = parts;
                // Convert the array to a Vector before adding it to the table model
                Vector<Object> rowData = new Vector<>(Arrays.asList(parts));
                model.addRow(rowData);
                return parts;
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching for Order ID", "Error", JOptionPane.ERROR_MESSAGE);
    }
    return null;
}

private void displayOrderDetails(String selectedOrderId) {
    DefaultTableModel model = (DefaultTableModel) tblQuotation1.getModel();
    model.setRowCount(0); // Clear existing data in the table

    try (BufferedReader br = new BufferedReader(new FileReader("salesOrder.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(",");
            String orderIDFromFile = parts[0].trim();
            if (orderIDFromFile.equals(selectedOrderId)) {
                // Order ID found, add details to the table
                Vector<Object> rowData = new Vector<>(Arrays.asList(parts));
                model.addRow(rowData);
                return; // Exit the method after adding the details
            }
        }
        // Handle case where the order is not found
        JOptionPane.showMessageDialog(this, "Order not found", "Not Found", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching for Order ID", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfOrderID = new javax.swing.JTextField();
        lblOrderID = new javax.swing.JLabel();
        lblFurnitureID = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();
        lblCustomerID = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfCustomerID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblQuotation1 = new javax.swing.JTable();
        btnSaveChanges = new javax.swing.JButton();
        tfFurnitureID = new javax.swing.JComboBox<>();
        tfQuantity = new javax.swing.JSpinner();

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setText("MODIFY SALES ORDER");

        tfOrderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfOrderIDActionPerformed(evt);
            }
        });
        tfOrderID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfOrderIDKeyTyped(evt);
            }
        });

        lblOrderID.setText("ORDER ID");

        lblFurnitureID.setText("FURNITURE ID");

        lblQuantity.setText("QUANTITY");

        lblTotal.setText("TOTAL");

        lblCustomerID.setText("CUSTOMER ID");

        lblStatus.setText("STATUS");

        jLabel8.setText("WAITING FOR APPROVAL");

        tblQuotation1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ORDER ID", "FURNITURE ID", "QUANTITY", "TOTAL", "CUSTOMER", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(tblQuotation1);

        btnSaveChanges.setText("SAVE CHANGES");
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        tfFurnitureID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        tfFurnitureID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfFurnitureIDActionPerformed(evt);
            }
        });

        tfQuantity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tfQuantityStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrderID)
                                    .addComponent(lblFurnitureID)
                                    .addComponent(lblQuantity)
                                    .addComponent(lblTotal))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(tfOrderID)
                                            .addComponent(tfFurnitureID, 0, 114, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(tfTotal, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(tfQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                                .addComponent(tfCustomerID, javax.swing.GroupLayout.Alignment.LEADING))))))
                            .addComponent(lblCustomerID)
                            .addComponent(lblStatus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveChanges)
                        .addGap(128, 128, 128)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOrderID))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFurnitureID)
                            .addComponent(tfFurnitureID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblQuantity))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotal))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustomerID)
                            .addComponent(tfCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStatus)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addComponent(btnSaveChanges)
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(29, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tfQuantityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tfQuantityStateChanged
        // TODO add your handling code here:
       quantity = (int)tfQuantity.getValue();
       calculateTotal();
    }//GEN-LAST:event_tfQuantityStateChanged

    private void tfOrderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfOrderIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfOrderIDActionPerformed

    private void tfOrderIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfOrderIDKeyTyped
        // TODO add your handling code here:
        if((int)evt.getKeyChar()== 10){
             selectedOrder = readTableDataFromFile(tfOrderID.getText());
        } else {
           // JOptionPane.showMessageDialog(this, "Please enter an order ID", "Error", JOptionPane.ERROR_MESSAGE);
        }
    
    }//GEN-LAST:event_tfOrderIDKeyTyped

    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        // TODO add your handling code here:
        // Validate that an order is selected
        
        if (selectedOrder == null ) {
            JOptionPane.showMessageDialog(this, "Please select an order to modify", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update the selected order details with the modified data
        selectedOrder[1] = tfFurnitureID.getSelectedItem().toString();
        selectedOrder[2] = tfQuantity.getValue().toString();
        selectedOrder[3] = tfTotal.getText();
        selectedOrder[4] = tfCustomerID.getText();
        selectedOrder[5] = "Pending";
        selectedOrder[6]= " ";
        selectedOrder[7] = " ";
        

        // Save the changes to the text file
        saveChangesToFile();

        // Display a message indicating that changes are saved
        JOptionPane.showMessageDialog(this, "Changes saved successfully!");

        // Reload the table to reflect the changes
        readTableDataFromFile(null);
    
    }//GEN-LAST:event_btnSaveChangesActionPerformed

    private void tfFurnitureIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfFurnitureIDActionPerformed
        // TODO add your handling code here:
        String furniture = (String) tfFurnitureID.getSelectedItem();
        for (Furniture record: Furniture.list){
            if (record.getId().equals(furniture)){
               price = record.getPrice();
            }
        }
        calculateTotal();
    }//GEN-LAST:event_tfFurnitureIDActionPerformed
    
     private void calculateTotal(){
     tfTotal.setText(Double.toString(price*quantity));
    }
     
    private void saveChangesToFile() {
    // Read all existing data from the file
    List<String> allOrders = new ArrayList<>();
    try (BufferedReader br = new BufferedReader(new FileReader("salesOrder.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            allOrders.add(line);
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error reading data from file", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Update the selected order in the list
    for (int i = 0; i < allOrders.size(); i++) {
        String[] parts = allOrders.get(i).split(",");
        if (parts.length >= 6 && parts[0].equals(selectedOrder[0])) {
            // Update the parts array with the new data
            parts[1] = selectedOrder[1];
            parts[2] = selectedOrder[2];
            parts[3] = selectedOrder[3];
            parts[4] = selectedOrder[4];
            parts[5] = "Pending"; 
            parts[6] = " ";
            parts[7] = " ";
            
            // Join the array into a comma-separated string
            String updatedOrder = String.join(",", Arrays.copyOfRange(parts, 0, 8));
            allOrders.set(i, updatedOrder);

            // Update the selectedOrder array
            selectedOrder = Arrays.copyOfRange(parts, 0, 6); // Clone the array to avoid reference issues

            break;
        }
    }

    // Write the updated data back to the file
    try (BufferedWriter writer = new BufferedWriter(new FileWriter("salesOrder.txt"))) {
        for (String order : allOrders) {
            writer.write(order);
            writer.newLine();
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error writing data to file", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Redisplay modified order in table
    displayOrderDetails(selectedOrder[0]);
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblFurnitureID;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblQuotation1;
    private javax.swing.JTextField tfCustomerID;
    private javax.swing.JComboBox<String> tfFurnitureID;
    private javax.swing.JTextField tfOrderID;
    private javax.swing.JSpinner tfQuantity;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables
}
