/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interface;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aryssa
 */
public class DeleteSalesOrder extends javax.swing.JPanel {
    public MainPage parent;
    /**
     * Creates new form PersonalSales
     */
    public DeleteSalesOrder() {
        initComponents();
    }

    public DeleteSalesOrder(MainPage parent) {
        initComponents();
        this.parent = parent;
        loadData();
    }
    private void loadData(){
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblOrderID = new javax.swing.JLabel();
        tfOrderID1 = new javax.swing.JTextField();
        btnSaveChanges = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblQuotation2 = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel1.setText("DELETE SALES ORDER QUOTATION");

        lblOrderID.setText("ORDER ID");

        tfOrderID1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfOrderID1KeyTyped(evt);
            }
        });

        btnSaveChanges.setText("SAVE CHANGES");
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        tblQuotation2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ORDER ID", "FURNITURE ID", "QUANTITY", "TOTAL", "CUSTOMER ID", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(tblQuotation2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblOrderID)
                            .addGap(34, 34, 34)
                            .addComponent(tfOrderID1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveChanges))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfOrderID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOrderID)
                    .addComponent(btnSaveChanges))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tfOrderID1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfOrderID1KeyTyped
        // TODO add your handling code here:
        if((int)evt.getKeyChar()== 10){
             displayOrderDetails(tfOrderID1.getText());
        }
    }//GEN-LAST:event_tfOrderID1KeyTyped

    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        // TODO add your handling code here:
        deleteOrder(tfOrderID1.getText());
    }//GEN-LAST:event_btnSaveChangesActionPerformed
    
    private void displayOrderDetails(String selectedOrderId) {
        DefaultTableModel model = (DefaultTableModel) tblQuotation2.getModel();
        model.setRowCount(0); // Clear existing data in the table

        try (BufferedReader br = new BufferedReader(new FileReader("salesOrder.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                String orderIDFromFile = parts[0].trim();
                if (orderIDFromFile.equals(selectedOrderId)) {
                    // Order ID found, add details to the table
                    Vector<Object> rowData = new Vector<>(Arrays.asList(parts));
                    model.addRow(rowData);
                    return; // Exit the method after adding the details
                }
            }
            JOptionPane.showMessageDialog(this, "Order not found", "Not Found", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error searching for Order ID", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void deleteOrder(String selectedOrderId) {
    // Read all existing data from the file
    List<String> allOrders = new ArrayList<>();
    try (BufferedReader br = new BufferedReader(new FileReader("salesOrder.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            allOrders.add(line);
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error reading data from file", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Use an iterator to safely remove the selected order from the list
    for (java.util.Iterator<String> iterator = allOrders.iterator(); iterator.hasNext(); ) {
        String[] parts = iterator.next().split(",");
        if (parts.length >= 6 && parts[0].equals(selectedOrderId)) {
            iterator.remove();
            break;
        }
    }

    // Write the updated data back to the file
    try (BufferedWriter writer = new BufferedWriter(new FileWriter("salesOrder.txt"))) {
        for (String order : allOrders) {
            writer.write(order);
            writer.newLine();
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error writing data to file", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Clear the table after delete
    DefaultTableModel model = (DefaultTableModel) tblQuotation2.getModel();
    model.setRowCount(0);

    // Display a message indicating that the order is deleted
    JOptionPane.showMessageDialog(this, "Order deleted successfully!");
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JTable tblQuotation2;
    private javax.swing.JTextField tfOrderID1;
    // End of variables declaration//GEN-END:variables
}
